<% layout('layouts/boilerplate')%>

<style>
    #footer {
    position:fixed;
    bottom:0;
    width:100%;
    }

    #map {
    width: 100%;
    height: 600px;
    border-radius: 10px;
    }

    .leftColumn{
    width: 30%;
    padding-right: 0px;
    }

    .rightColumn{
    width: 70%;
    padding-left: 3px;
    }

    .form-group{
    padding: 5px;
    }

    .mapboxgl-popup {
    max-width: 200px;
    }

    .mapboxgl-popup-content {
    text-align: center;
    font-family: 'Open Sans', sans-serif;
    }

    #marker {
        background-image: url('https://docs.mapbox.com/mapbox-gl-js/assets/washington-monument.jpg');
        background-size: cover;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        cursor: pointer;
    }
    
    .mapboxgl-popup {
        max-width: 200px;
    }
</style>



<main class = "p-2" >
    <div class = "row">
        <div class="leftColumn">

            <form name="form" method="POST" action="/admin">
                <small class="form-text text-muted">Enter offendor information and PIN it</small>

                <div class="form-group mt-4">
                  <label for="exampleInputEmail1">Name</label>
                  <input type="text" class="form-control" name = "name" required>

                </div>

                <div class="form-group">
                  <label for="exampleInputPassword1">Description</label>
                  <input type="text" class="form-control" name="description" required>
                </div>

                <div class="form-group">
                    <label >Location</label>
                    <textarea class = "form-control text-muted" name = "locationname"id = "text_location" required placeholder="enter location from map search"></textarea>
                </div>

                <div class="form-group">
                    <label >Coordinates</label>
                    <textarea class = "form-control text-muted" id = "text_coordinates" name = "tx_coordinates"required placeholder="enter coordinates from map search"></textarea>
                </div>
                               
                <button type="submit" class="btn btn-primary mt-4" id = "pin_bt" >PIN IT</button>
              </form>
        
        </div>

        <div class = "rightColumn">
            <div class="container">
                <div id='map' class = 'map'>
                </div>
            </div>
        </div>
    </div>

</main>

<!-- <script scr = "../public/scripts/map.js"></script>
<script scr = "../public/scripts/home.js"></script> -->

<!-- import 3rd party scripts and styles -->
<link href="https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js"></script>
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css" type="text/css">


<script>

    mapboxgl.accessToken = 'pk.eyJ1IjoieWFuZzExMDMiLCJhIjoiY2w5dnd1cmdpMGQ4YjQxbzZncXVubGJ4aSJ9.ca1wlXnOgUYPXcvaJKJu1Q';

    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center:[-71.0575,42.3655],// longitude, Latitude
        zoom:5
    });

    /* Given a query in the form "lng, lat" or "lat, lng"
    * returns the matching geographic coordinate(s)
    * as search results in carmen geojson format,
    * https://github.com/mapbox/carmen/blob/master/carmen-geojson.md */
    const coordinatesGeocoder = function (query) {
        // Match anything which looks like
        // decimal degrees coordinate pair.
        const matches = query.match(
        /^[ ]*(?:Lat: )?(-?\d+\.?\d*)[, ]+(?:Lng: )?(-?\d+\.?\d*)[ ]*$/i
        );
        if (!matches) {
        return null;
        }
        
        function coordinateFeature(lng, lat) {
            return {
                center: [lng, lat],
                geometry: {
                type: 'Point',
                coordinates: [lng, lat]
            },
                place_name: 'Lat: ' + lat + ' Lng: ' + lng,
                place_type: ['coordinate'],
                properties: {},
                type: 'Feature'
            };
        }
        
            const coord1 = Number(matches[1]);
            const coord2 = Number(matches[2]);
            const geocodes = [];
            
            if (coord1 < -90 || coord1 > 90) {
            // must be lng, lat
            geocodes.push(coordinateFeature(coord1, coord2));
            }
            
            if (coord2 < -90 || coord2 > 90) {
            // must be lat, lng
            geocodes.push(coordinateFeature(coord2, coord1));
            }
            
            if (geocodes.length === 0) {
            // else could be either lng, lat or lat, lng
            geocodes.push(coordinateFeature(coord1, coord2));
            geocodes.push(coordinateFeature(coord2, coord1));
            }
            return geocodes;
        };

        //full screen control
        map.addControl(new mapboxgl.FullscreenControl(),'top-left');

        map.on('load', async () => {
        const geodata = await get_markers();
        const jsondata = {"type":"FeatureCollection","features": geodata}

        map.loadImage(
            'https://docs.mapbox.com/mapbox-gl-js/assets/custom_marker.png',
            (error, image) => {
            if (error) throw error;
            map.addImage('custom-marker', image);
            // Add a GeoJSON source with 2 points

            const pointsdata = {"type":"geojson","data": jsondata}
            map.addSource('points',pointsdata)
            // map.addSource({'points':pointsdata},{'tolerance':0});
            
            // Add a symbol layer
            map.addLayer({
            'id': 'points',
            'type': 'symbol',
            'source': 'points',
            'layout': {
                "visibility": "visible",
                'icon-allow-overlap': true,
                'text-ignore-placement': true,

                'icon-image': 'custom-marker',
                // get the title name from the source's "title" property
                'text-field': ['get', 'title'],
                'text-font': [
                'Open Sans Semibold',
                'Arial Unicode MS Bold'
            ],
            'text-offset': [0, 1.25],
            'text-anchor': 'top'
            }
            });
            }
            );
        });  

    // When a click event occurs on a feature in the places layer, open a popup at the
    // location of the feature, with description HTML from its properties.
    map.on('click', 'points', (e) => {
    // Copy coordinates array.
    const coordinates = e.features[0].geometry.coordinates.slice();
    const description = e.features[0].properties.description;
    
    // Ensure that if the map is zoomed out such that multiple
    // copies of the feature are visible, the popup appears
    // over the copy being pointed to.
    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
    }
    
    new mapboxgl.Popup()
    .setLngLat(coordinates)
    .setHTML(description)
    .addTo(map);
    });

    // Change the cursor to a pointer when the mouse is over the places layer.
    map.on('mouseenter', 'places', () => {
    map.getCanvas().style.cursor = 'pointer';
    });
    
    // Change it back to a pointer when it leaves.
    map.on('mouseleave', 'places', () => {
    map.getCanvas().style.cursor = '';
    });


    const get_markers = async () => {
    const response =  await fetch('http://localhost:3000/api/getmarkers', {method : 'GET'})
    const data = await response.json()
    return data;
    }

    var geocoder = new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        trackProximity: true,
        enableGeolocation: true,
        localGeocoder: function(query) {
            return coordinatesGeocoder(query);
        },
        mapboxgl: mapboxgl
    });

    map.addControl(geocoder)

    window.geocoder = geocoder;

    var offendorlocation;

    geocoder.on('result', function(e) {
        offendorlocation = e.result;
        document.getElementById('text_location').value = offendorlocation.place_name_en;
        document.getElementById('text_coordinates').value = offendorlocation.geometry.coordinates;
    });

</script>

