<% layout('layouts/boilerplate')%>
<style>
    #footer {
    position:fixed;
    bottom:0;
    width:100%;
    }

    #map {
    width: 100%;
    height: 600px;
    border-radius: 10px;
    }

    .leftColumn{
    width: 30%;
    padding-right: 0px;
    }

    .rightColumn{
    width: 70%;
    padding-left: 3px;
    }

    .form-group{
    padding: 5px;
    }
</style>


<main class = "p-2" >

    <div class = "row">
        <div class="leftColumn">
            <div class="form-group">
                <label for="">Felony Type: </label>
                <select class="dropdown" id="dd_crimeType" style="max-width: 200px;">
                </select>
            </div>
            <div class="form-group">
                <label for="">Year:</label>
                <select class="dropdown" id="dd_crimeyear">
                </select>
            </div>

            <!-- <button>search</button> -->
            <div class="d-grid gap-2 d-md-block my-lg-2">
                <button class="btn btn-primary" type="button" id="search_bt">Search</button>
                <button class="btn btn-primary" type="button">Reset</button>
            </div>
        
        </div>

        <div class = "rightColumn">
            <div class="container">
                <div id='map'></div>
            </div>
        </div>
    </div>

</main>

<!-- <script scr = "../public/scripts/map.js"></script>
<script scr = "../public/scripts/home.js"></script> -->

<script>
//get the first button
document.getElementById('search_bt').addEventListener("click",handleClick);


function setUpFelonyDD(){
    var FelonyType = ['Rape','Robbery',	'Burglary',	'Larceny-theft',
'Motor vehicle theft',	'Arson',	'Prostitution and commercialized vice',	'Other sex offenses',
	'Narcotic drug laws',	'Gambling'	,'Other not specified',	'Suspected felony type'];

    var otherThanFelonyType = ['Domestic violence',	'Child killed by babysitter',	'Brawl due to influence of alcohol',	
    'Brawl due to influence of narcotics',	'Argument over money or property',	'Gangland killings',	
    'Juvenile gang killings',	'Institutional killings',	'Other-not specified','Unknown'];

    var option = "";

    for(var i = 0; i<FelonyType.length;i++){
        option += '<option value="'+FelonyType[i]+'">' + FelonyType[i] + "</option>"
    }
    console.log('woot')
    document.getElementById('dd_crimeType').innerHTML = option
}

setUpFelonyDD();


function setUpYearDD(){

    var option = "";
    for(var i = 2022; i>1972;i--){
        option +='<option value="'+i+'">' + i+ "</option>"
    }
    console.log('huuu')
    document.getElementById('dd_crimeyear').innerHTML = option
}

setUpYearDD();

function handleClick(){

}



//use check Status to handle reference error
const checkStatus = async(url) => {
    const response  = await fetch(url);
    //need to turn into check status function
    if(response.status !== 200){
        throw new ReferenceError('cannot fetch data');
    }
    data = await response.json();
    return data

        // if(err instanceof ReferenceError){
        //     alert(err.name+": " +err.message);
        // }
}


mapboxgl.accessToken = 'pk.eyJ1IjoieWFuZzExMDMiLCJhIjoiY2w5dnd1cmdpMGQ4YjQxbzZncXVubGJ4aSJ9.ca1wlXnOgUYPXcvaJKJu1Q';

const map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/streets-v11',
    center:[-71.0575,42.3655],// longitude, Latitude
    zoom:9
});

/* Given a query in the form "lng, lat" or "lat, lng"
* returns the matching geographic coordinate(s)
* as search results in carmen geojson format,
* https://github.com/mapbox/carmen/blob/master/carmen-geojson.md */
const coordinatesGeocoder = function (query) {
    // Match anything which looks like
    // decimal degrees coordinate pair.
    const matches = query.match(
    /^[ ]*(?:Lat: )?(-?\d+\.?\d*)[, ]+(?:Lng: )?(-?\d+\.?\d*)[ ]*$/i
    );
    if (!matches) {
    return null;
    }
     
    function coordinateFeature(lng, lat) {
    return {
        center: [lng, lat],
        geometry: {
        type: 'Point',
        coordinates: [lng, lat]
    },
    place_name: 'Lat: ' + lat + ' Lng: ' + lng,
    place_type: ['coordinate'],
    properties: {},
    type: 'Feature'
    };
    }
     
    const coord1 = Number(matches[1]);
    const coord2 = Number(matches[2]);
    const geocodes = [];
     
    if (coord1 < -90 || coord1 > 90) {
    // must be lng, lat
    geocodes.push(coordinateFeature(coord1, coord2));
    }
     
    if (coord2 < -90 || coord2 > 90) {
    // must be lat, lng
    geocodes.push(coordinateFeature(coord2, coord1));
    }
     
    if (geocodes.length === 0) {
    // else could be either lng, lat or lat, lng
    geocodes.push(coordinateFeature(coord1, coord2));
    geocodes.push(coordinateFeature(coord2, coord1));
    }
     
    return geocodes;
};

//full screen control
map.addControl(new mapboxgl.FullscreenControl(),'top-left');


//allow input lat, log to search
map.addControl(
    new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        localGeocoder:coordinatesGeocoder,
        mapboxgl: mapboxgl,
        reverseGeocode:true
    })
);

</script>